{"version":3,"file":"ssr.mjs","sources":["../../../../../../darwin_arm64-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/assets.mjs","../../../../../../darwin_arm64-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/console.mjs","../../../../../../darwin_arm64-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/manifest.mjs","../../../../../../darwin_arm64-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/utils/url.mjs","../../../../../../darwin_arm64-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/utils/ng.mjs","../../../../../../darwin_arm64-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/utils/promise.mjs","../../../../../../darwin_arm64-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/routes/route-config.mjs","../../../../../../darwin_arm64-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/routes/route-tree.mjs","../../../../../../darwin_arm64-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/routes/ng-routes.mjs","../../../../../../darwin_arm64-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/hooks.mjs","../../../../../../darwin_arm64-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/routes/router.mjs","../../../../../../darwin_arm64-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/utils/crypto.mjs","../../../../../../darwin_arm64-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/utils/inline-critical-css.mjs","../../../../../../darwin_arm64-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/utils/lru-cache.mjs","../../../../../../darwin_arm64-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/app.mjs","../../../../../../darwin_arm64-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/private_export.mjs","../../../../../../darwin_arm64-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/i18n.mjs","../../../../../../darwin_arm64-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/app-engine.mjs","../../../../../../darwin_arm64-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/handler.mjs"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Manages server-side assets.\n */\nexport class ServerAssets {\n    manifest;\n    /**\n     * Creates an instance of ServerAsset.\n     *\n     * @param manifest - The manifest containing the server assets.\n     */\n    constructor(manifest) {\n        this.manifest = manifest;\n    }\n    /**\n     * Retrieves the content of a server-side asset using its path.\n     *\n     * @param path - The path to the server asset within the manifest.\n     * @returns The server asset associated with the provided path, as a `ServerAsset` object.\n     * @throws Error - Throws an error if the asset does not exist.\n     */\n    getServerAsset(path) {\n        const asset = this.manifest.assets[path];\n        if (!asset) {\n            throw new Error(`Server asset '${path}' does not exist.`);\n        }\n        return asset;\n    }\n    /**\n     * Checks if a specific server-side asset exists.\n     *\n     * @param path - The path to the server asset.\n     * @returns A boolean indicating whether the asset exists.\n     */\n    hasServerAsset(path) {\n        return !!this.manifest.assets[path];\n    }\n    /**\n     * Retrieves the asset for 'index.server.html'.\n     *\n     * @returns The `ServerAsset` object for 'index.server.html'.\n     * @throws Error - Throws an error if 'index.server.html' does not exist.\n     */\n    getIndexServerHtml() {\n        return this.getServerAsset('index.server.html');\n    }\n}\n//# sourceMappingURL=assets.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { ɵConsole } from '@angular/core';\n/**\n * A set of log messages that should be ignored and not printed to the console.\n */\nconst IGNORED_LOGS = new Set(['Angular is running in development mode.']);\n/**\n * Custom implementation of the Angular Console service that filters out specific log messages.\n *\n * This class extends the internal Angular `ɵConsole` class to provide customized logging behavior.\n * It overrides the `log` method to suppress logs that match certain predefined messages.\n */\nexport class Console extends ɵConsole {\n    /**\n     * Logs a message to the console if it is not in the set of ignored messages.\n     *\n     * @param message - The message to log to the console.\n     *\n     * This method overrides the `log` method of the `ɵConsole` class. It checks if the\n     * message is in the `IGNORED_LOGS` set. If it is not, it delegates the logging to\n     * the parent class's `log` method. Otherwise, the message is suppressed.\n     */\n    log(message) {\n        if (!IGNORED_LOGS.has(message)) {\n            super.log(message);\n        }\n    }\n}\n//# sourceMappingURL=console.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * The Angular app manifest object.\n * This is used internally to store the current Angular app manifest.\n */\nlet angularAppManifest;\n/**\n * Sets the Angular app manifest.\n *\n * @param manifest - The manifest object to set for the Angular application.\n */\nexport function setAngularAppManifest(manifest) {\n    angularAppManifest = manifest;\n}\n/**\n * Gets the Angular app manifest.\n *\n * @returns The Angular app manifest.\n * @throws Will throw an error if the Angular app manifest is not set.\n */\nexport function getAngularAppManifest() {\n    if (!angularAppManifest) {\n        throw new Error('Angular app manifest is not set. ' +\n            `Please ensure you are using the '@angular/build:application' builder to build your server application.`);\n    }\n    return angularAppManifest;\n}\n/**\n * The Angular app engine manifest object.\n * This is used internally to store the current Angular app engine manifest.\n */\nlet angularAppEngineManifest;\n/**\n * Sets the Angular app engine manifest.\n *\n * @param manifest - The engine manifest object to set.\n */\nexport function setAngularAppEngineManifest(manifest) {\n    angularAppEngineManifest = manifest;\n}\n/**\n * Gets the Angular app engine manifest.\n *\n * @returns The Angular app engine manifest.\n * @throws Will throw an error if the Angular app engine manifest is not set.\n */\nexport function getAngularAppEngineManifest() {\n    if (!angularAppEngineManifest) {\n        throw new Error('Angular app engine manifest is not set. ' +\n            `Please ensure you are using the '@angular/build:application' builder to build your server application.`);\n    }\n    return angularAppEngineManifest;\n}\n//# sourceMappingURL=manifest.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Removes the trailing slash from a URL if it exists.\n *\n * @param url - The URL string from which to remove the trailing slash.\n * @returns The URL string without a trailing slash.\n *\n * @example\n * ```js\n * stripTrailingSlash('path/'); // 'path'\n * stripTrailingSlash('/path');  // '/path'\n * stripTrailingSlash('/'); // '/'\n * stripTrailingSlash(''); // ''\n * ```\n */\nexport function stripTrailingSlash(url) {\n    // Check if the last character of the URL is a slash\n    return url.length > 1 && url[url.length - 1] === '/' ? url.slice(0, -1) : url;\n}\n/**\n * Removes the leading slash from a URL if it exists.\n *\n * @param url - The URL string from which to remove the leading slash.\n * @returns The URL string without a leading slash.\n *\n * @example\n * ```js\n * stripLeadingSlash('/path'); // 'path'\n * stripLeadingSlash('/path/');  // 'path/'\n * stripLeadingSlash('/'); // '/'\n * stripLeadingSlash(''); // ''\n * ```\n */\nexport function stripLeadingSlash(url) {\n    // Check if the first character of the URL is a slash\n    return url.length > 1 && url[0] === '/' ? url.slice(1) : url;\n}\n/**\n * Adds a leading slash to a URL if it does not already have one.\n *\n * @param url - The URL string to which the leading slash will be added.\n * @returns The URL string with a leading slash.\n *\n * @example\n * ```js\n * addLeadingSlash('path'); // '/path'\n * addLeadingSlash('/path'); // '/path'\n * ```\n */\nexport function addLeadingSlash(url) {\n    // Check if the URL already starts with a slash\n    return url[0] === '/' ? url : `/${url}`;\n}\n/**\n * Adds a trailing slash to a URL if it does not already have one.\n *\n * @param url - The URL string to which the trailing slash will be added.\n * @returns The URL string with a trailing slash.\n *\n * @example\n * ```js\n * addTrailingSlash('path'); // 'path/'\n * addTrailingSlash('path/'); // 'path/'\n * ```\n */\nexport function addTrailingSlash(url) {\n    // Check if the URL already end with a slash\n    return url[url.length - 1] === '/' ? url : `${url}/`;\n}\n/**\n * Joins URL parts into a single URL string.\n *\n * This function takes multiple URL segments, normalizes them by removing leading\n * and trailing slashes where appropriate, and then joins them into a single URL.\n *\n * @param parts - The parts of the URL to join. Each part can be a string with or without slashes.\n * @returns The joined URL string, with normalized slashes.\n *\n * @example\n * ```js\n * joinUrlParts('path/', '/to/resource'); // '/path/to/resource'\n * joinUrlParts('/path/', 'to/resource'); // '/path/to/resource'\n * joinUrlParts('', ''); // '/'\n * ```\n */\nexport function joinUrlParts(...parts) {\n    const normalizeParts = [];\n    for (const part of parts) {\n        if (part === '') {\n            // Skip any empty parts\n            continue;\n        }\n        let normalizedPart = part;\n        if (part[0] === '/') {\n            normalizedPart = normalizedPart.slice(1);\n        }\n        if (part[part.length - 1] === '/') {\n            normalizedPart = normalizedPart.slice(0, -1);\n        }\n        if (normalizedPart !== '') {\n            normalizeParts.push(normalizedPart);\n        }\n    }\n    return addLeadingSlash(normalizeParts.join('/'));\n}\n/**\n * Strips `/index.html` from the end of a URL's path, if present.\n *\n * This function is used to convert URLs pointing to an `index.html` file into their directory\n * equivalents. For example, it transforms a URL like `http://www.example.com/page/index.html`\n * into `http://www.example.com/page`.\n *\n * @param url - The URL object to process.\n * @returns A new URL object with `/index.html` removed from the path, if it was present.\n *\n * @example\n * ```typescript\n * const originalUrl = new URL('http://www.example.com/page/index.html');\n * const cleanedUrl = stripIndexHtmlFromURL(originalUrl);\n * console.log(cleanedUrl.href); // Output: 'http://www.example.com/page'\n * ```\n */\nexport function stripIndexHtmlFromURL(url) {\n    if (url.pathname.endsWith('/index.html')) {\n        const modifiedURL = new URL(url);\n        // Remove '/index.html' from the pathname\n        modifiedURL.pathname = modifiedURL.pathname.slice(0, /** '/index.html'.length */ -11);\n        return modifiedURL;\n    }\n    return url;\n}\n/**\n * Resolves `*` placeholders in a path template by mapping them to corresponding segments\n * from a base path. This is useful for constructing paths dynamically based on a given base path.\n *\n * The function processes the `toPath` string, replacing each `*` placeholder with\n * the corresponding segment from the `fromPath`. If the `toPath` contains no placeholders,\n * it is returned as-is. Invalid `toPath` formats (not starting with `/`) will throw an error.\n *\n * @param toPath - A path template string that may contain `*` placeholders. Each `*` is replaced\n * by the corresponding segment from the `fromPath`. Static paths (e.g., `/static/path`) are returned\n * directly without placeholder replacement.\n * @param fromPath - A base path string, split into segments, that provides values for\n * replacing `*` placeholders in the `toPath`.\n * @returns A resolved path string with `*` placeholders replaced by segments from the `fromPath`,\n * or the `toPath` returned unchanged if it contains no placeholders.\n *\n * @throws If the `toPath` does not start with a `/`, indicating an invalid path format.\n *\n * @example\n * ```typescript\n * // Example with placeholders resolved\n * const resolvedPath = buildPathWithParams('/*\\/details', '/123/abc');\n * console.log(resolvedPath); // Outputs: '/123/details'\n *\n * // Example with a static path\n * const staticPath = buildPathWithParams('/static/path', '/base/unused');\n * console.log(staticPath); // Outputs: '/static/path'\n * ```\n */\nexport function buildPathWithParams(toPath, fromPath) {\n    if (toPath[0] !== '/') {\n        throw new Error(`Invalid toPath: The string must start with a '/'. Received: '${toPath}'`);\n    }\n    if (fromPath[0] !== '/') {\n        throw new Error(`Invalid fromPath: The string must start with a '/'. Received: '${fromPath}'`);\n    }\n    if (!toPath.includes('/*')) {\n        return toPath;\n    }\n    const fromPathParts = fromPath.split('/');\n    const toPathParts = toPath.split('/');\n    const resolvedParts = toPathParts.map((part, index) => toPathParts[index] === '*' ? fromPathParts[index] : part);\n    return joinUrlParts(...resolvedParts);\n}\n//# sourceMappingURL=url.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { ɵConsole } from '@angular/core';\nimport { ɵSERVER_CONTEXT as SERVER_CONTEXT, renderApplication, renderModule, } from '@angular/platform-server';\nimport { Console } from '../console';\nimport { stripIndexHtmlFromURL } from './url';\n/**\n * Renders an Angular application or module to an HTML string.\n *\n * This function determines whether the provided `bootstrap` value is an Angular module\n * or a bootstrap function and calls the appropriate rendering method (`renderModule` or\n * `renderApplication`) based on that determination.\n *\n * @param html - The HTML string to be used as the initial document content.\n * @param bootstrap - Either an Angular module type or a function that returns a promise\n *                    resolving to an `ApplicationRef`.\n * @param url - The URL of the application. This is used for server-side rendering to\n *              correctly handle route-based rendering.\n * @param platformProviders - An array of platform providers to be used during the\n *                             rendering process.\n * @param serverContext - A string representing the server context, used to provide additional\n *                        context or metadata during server-side rendering.\n * @returns A promise that resolves to a string containing the rendered HTML.\n */\nexport function renderAngular(html, bootstrap, url, platformProviders, serverContext) {\n    const providers = [\n        {\n            provide: SERVER_CONTEXT,\n            useValue: serverContext,\n        },\n        {\n            // An Angular Console Provider that does not print a set of predefined logs.\n            provide: ɵConsole,\n            // Using `useClass` would necessitate decorating `Console` with `@Injectable`,\n            // which would require switching from `ts_library` to `ng_module`. This change\n            // would also necessitate various patches of `@angular/bazel` to support ESM.\n            useFactory: () => new Console(),\n        },\n        ...platformProviders,\n    ];\n    // A request to `http://www.example.com/page/index.html` will render the Angular route corresponding to `http://www.example.com/page`.\n    const urlToRender = stripIndexHtmlFromURL(url).toString();\n    return isNgModule(bootstrap)\n        ? renderModule(bootstrap, {\n            url: urlToRender,\n            document: html,\n            extraProviders: providers,\n        })\n        : renderApplication(bootstrap, {\n            url: urlToRender,\n            document: html,\n            platformProviders: providers,\n        });\n}\n/**\n * Type guard to determine if a given value is an Angular module.\n * Angular modules are identified by the presence of the `ɵmod` static property.\n * This function helps distinguish between Angular modules and bootstrap functions.\n *\n * @param value - The value to be checked.\n * @returns True if the value is an Angular module (i.e., it has the `ɵmod` property), false otherwise.\n */\nexport function isNgModule(value) {\n    return 'ɵmod' in value;\n}\n//# sourceMappingURL=ng.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Creates a promise that resolves with the result of the provided `promise` or rejects with an\n * `AbortError` if the `AbortSignal` is triggered before the promise resolves.\n *\n * @param promise - The promise to monitor for completion.\n * @param signal - An `AbortSignal` used to monitor for an abort event. If the signal is aborted,\n *                 the returned promise will reject.\n * @param errorMessagePrefix - A custom message prefix to include in the error message when the operation is aborted.\n * @returns A promise that either resolves with the value of the provided `promise` or rejects with\n *          an `AbortError` if the `AbortSignal` is triggered.\n *\n * @throws {AbortError} If the `AbortSignal` is triggered before the `promise` resolves.\n */\nexport function promiseWithAbort(promise, signal, errorMessagePrefix) {\n    return new Promise((resolve, reject) => {\n        const abortHandler = () => {\n            reject(new DOMException(`${errorMessagePrefix} was aborted.\\n${signal.reason}`, 'AbortError'));\n        };\n        // Check for abort signal\n        if (signal.aborted) {\n            abortHandler();\n            return;\n        }\n        signal.addEventListener('abort', abortHandler, { once: true });\n        promise\n            .then(resolve)\n            .catch(reject)\n            .finally(() => {\n            signal.removeEventListener('abort', abortHandler);\n        });\n    });\n}\n//# sourceMappingURL=promise.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { InjectionToken, makeEnvironmentProviders } from '@angular/core';\n/**\n * Different rendering modes for server routes.\n * @see {@link provideServerRoutesConfig}\n * @see {@link ServerRoute}\n * @developerPreview\n */\nexport var RenderMode;\n(function (RenderMode) {\n    /** Server-Side Rendering (SSR) mode, where content is rendered on the server for each request. */\n    RenderMode[RenderMode[\"Server\"] = 0] = \"Server\";\n    /** Client-Side Rendering (CSR) mode, where content is rendered on the client side in the browser. */\n    RenderMode[RenderMode[\"Client\"] = 1] = \"Client\";\n    /** Static Site Generation (SSG) mode, where content is pre-rendered at build time and served as static files. */\n    RenderMode[RenderMode[\"Prerender\"] = 2] = \"Prerender\";\n})(RenderMode || (RenderMode = {}));\n/**\n * Defines the fallback strategies for Static Site Generation (SSG) routes when a pre-rendered path is not available.\n * This is particularly relevant for routes with parameterized URLs where some paths might not be pre-rendered at build time.\n * @see {@link ServerRoutePrerenderWithParams}\n * @developerPreview\n */\nexport var PrerenderFallback;\n(function (PrerenderFallback) {\n    /**\n     * Fallback to Server-Side Rendering (SSR) if the pre-rendered path is not available.\n     * This strategy dynamically generates the page on the server at request time.\n     */\n    PrerenderFallback[PrerenderFallback[\"Server\"] = 0] = \"Server\";\n    /**\n     * Fallback to Client-Side Rendering (CSR) if the pre-rendered path is not available.\n     * This strategy allows the page to be rendered on the client side.\n     */\n    PrerenderFallback[PrerenderFallback[\"Client\"] = 1] = \"Client\";\n    /**\n     * No fallback; if the path is not pre-rendered, the server will not handle the request.\n     * This means the application will not provide any response for paths that are not pre-rendered.\n     */\n    PrerenderFallback[PrerenderFallback[\"None\"] = 2] = \"None\";\n})(PrerenderFallback || (PrerenderFallback = {}));\n/**\n * Token for providing the server routes configuration.\n * @internal\n */\nexport const SERVER_ROUTES_CONFIG = new InjectionToken('SERVER_ROUTES_CONFIG');\n/**\n/**\n * Sets up the necessary providers for configuring server routes.\n * This function accepts an array of server routes and optional configuration\n * options, returning an `EnvironmentProviders` object that encapsulates\n * the server routes and configuration settings.\n *\n * @param routes - An array of server routes to be provided.\n * @param options - (Optional) An object containing additional configuration options for server routes.\n * @returns An `EnvironmentProviders` instance with the server routes configuration.\n *\n * @see {@link ServerRoute}\n * @see {@link ServerRoutesConfigOptions}\n * @developerPreview\n */\nexport function provideServerRoutesConfig(routes, options) {\n    if (typeof ngServerMode === 'undefined' || !ngServerMode) {\n        throw new Error(`The 'provideServerRoutesConfig' function should not be invoked within the browser portion of the application.`);\n    }\n    return makeEnvironmentProviders([\n        {\n            provide: SERVER_ROUTES_CONFIG,\n            useValue: { routes, ...options },\n        },\n    ]);\n}\n//# sourceMappingURL=route-config.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { stripTrailingSlash } from '../utils/url';\n/**\n * A route tree implementation that supports efficient route matching, including support for wildcard routes.\n * This structure is useful for organizing and retrieving routes in a hierarchical manner,\n * enabling complex routing scenarios with nested paths.\n *\n * @typeParam AdditionalMetadata - Type of additional metadata that can be associated with route nodes.\n */\nexport class RouteTree {\n    /**\n     * The root node of the route tree.\n     * All routes are stored and accessed relative to this root node.\n     */\n    root = this.createEmptyRouteTreeNode('');\n    /**\n     * A counter that tracks the order of route insertion.\n     * This ensures that routes are matched in the order they were defined,\n     * with earlier routes taking precedence.\n     */\n    insertionIndexCounter = 0;\n    /**\n     * Inserts a new route into the route tree.\n     * The route is broken down into segments, and each segment is added to the tree.\n     * Parameterized segments (e.g., :id) are normalized to wildcards (*) for matching purposes.\n     *\n     * @param route - The route path to insert into the tree.\n     * @param metadata - Metadata associated with the route, excluding the route path itself.\n     */\n    insert(route, metadata) {\n        let node = this.root;\n        const segments = this.getPathSegments(route);\n        const normalizedSegments = [];\n        for (const segment of segments) {\n            // Replace parameterized segments (e.g., :id) with a wildcard (*) for matching\n            const normalizedSegment = segment[0] === ':' ? '*' : segment;\n            let childNode = node.children.get(normalizedSegment);\n            if (!childNode) {\n                childNode = this.createEmptyRouteTreeNode(normalizedSegment);\n                node.children.set(normalizedSegment, childNode);\n            }\n            node = childNode;\n            normalizedSegments.push(normalizedSegment);\n        }\n        // At the leaf node, store the full route and its associated metadata\n        node.metadata = {\n            ...metadata,\n            route: normalizedSegments.join('/'),\n        };\n        node.insertionIndex = this.insertionIndexCounter++;\n    }\n    /**\n     * Matches a given route against the route tree and returns the best matching route's metadata.\n     * The best match is determined by the lowest insertion index, meaning the earliest defined route\n     * takes precedence.\n     *\n     * @param route - The route path to match against the route tree.\n     * @returns The metadata of the best matching route or `undefined` if no match is found.\n     */\n    match(route) {\n        const segments = this.getPathSegments(route);\n        return this.traverseBySegments(segments)?.metadata;\n    }\n    /**\n     * Converts the route tree into a serialized format representation.\n     * This method converts the route tree into an array of metadata objects that describe the structure of the tree.\n     * The array represents the routes in a nested manner where each entry includes the route and its associated metadata.\n     *\n     * @returns An array of `RouteTreeNodeMetadata` objects representing the route tree structure.\n     *          Each object includes the `route` and associated metadata of a route.\n     */\n    toObject() {\n        return Array.from(this.traverse());\n    }\n    /**\n     * Constructs a `RouteTree` from an object representation.\n     * This method is used to recreate a `RouteTree` instance from an array of metadata objects.\n     * The array should be in the format produced by `toObject`, allowing for the reconstruction of the route tree\n     * with the same routes and metadata.\n     *\n     * @param value - An array of `RouteTreeNodeMetadata` objects that represent the serialized format of the route tree.\n     *                Each object should include a `route` and its associated metadata.\n     * @returns A new `RouteTree` instance constructed from the provided metadata objects.\n     */\n    static fromObject(value) {\n        const tree = new RouteTree();\n        for (const { route, ...metadata } of value) {\n            tree.insert(route, metadata);\n        }\n        return tree;\n    }\n    /**\n     * A generator function that recursively traverses the route tree and yields the metadata of each node.\n     * This allows for easy and efficient iteration over all nodes in the tree.\n     *\n     * @param node - The current node to start the traversal from. Defaults to the root node of the tree.\n     */\n    *traverse(node = this.root) {\n        if (node.metadata) {\n            yield node.metadata;\n        }\n        for (const childNode of node.children.values()) {\n            yield* this.traverse(childNode);\n        }\n    }\n    /**\n     * Extracts the path segments from a given route string.\n     *\n     * @param route - The route string from which to extract segments.\n     * @returns An array of path segments.\n     */\n    getPathSegments(route) {\n        return stripTrailingSlash(route).split('/');\n    }\n    /**\n     * Recursively traverses the route tree from a given node, attempting to match the remaining route segments.\n     * If the node is a leaf node (no more segments to match) and contains metadata, the node is yielded.\n     *\n     * This function prioritizes exact segment matches first, followed by wildcard matches (`*`),\n     * and finally deep wildcard matches (`**`) that consume all segments.\n     *\n     * @param remainingSegments - The remaining segments of the route path to match.\n     * @param node - The current node in the route tree to start traversal from.\n     *\n     * @returns The node that best matches the remaining segments or `undefined` if no match is found.\n     */\n    traverseBySegments(remainingSegments, node = this.root) {\n        const { metadata, children } = node;\n        // If there are no remaining segments and the node has metadata, return this node\n        if (!remainingSegments?.length) {\n            if (metadata) {\n                return node;\n            }\n            return;\n        }\n        // If the node has no children, end the traversal\n        if (!children.size) {\n            return;\n        }\n        const [segment, ...restSegments] = remainingSegments;\n        let currentBestMatchNode;\n        // 1. Exact segment match\n        const exactMatchNode = node.children.get(segment);\n        currentBestMatchNode = this.getHigherPriorityNode(currentBestMatchNode, this.traverseBySegments(restSegments, exactMatchNode));\n        // 2. Wildcard segment match (`*`)\n        const wildcardNode = node.children.get('*');\n        currentBestMatchNode = this.getHigherPriorityNode(currentBestMatchNode, this.traverseBySegments(restSegments, wildcardNode));\n        // 3. Deep wildcard segment match (`**`)\n        const deepWildcardNode = node.children.get('**');\n        currentBestMatchNode = this.getHigherPriorityNode(currentBestMatchNode, deepWildcardNode);\n        return currentBestMatchNode;\n    }\n    /**\n     * Compares two nodes and returns the node with higher priority based on insertion index.\n     * A node with a lower insertion index is prioritized as it was defined earlier.\n     *\n     * @param currentBestMatchNode - The current best match node.\n     * @param candidateNode - The node being evaluated for higher priority based on insertion index.\n     * @returns The node with higher priority (i.e., lower insertion index). If one of the nodes is `undefined`, the other node is returned.\n     */\n    getHigherPriorityNode(currentBestMatchNode, candidateNode) {\n        if (!candidateNode) {\n            return currentBestMatchNode;\n        }\n        if (!currentBestMatchNode) {\n            return candidateNode;\n        }\n        return candidateNode.insertionIndex < currentBestMatchNode.insertionIndex\n            ? candidateNode\n            : currentBestMatchNode;\n    }\n    /**\n     * Creates an empty route tree node with the specified segment.\n     * This helper function is used during the tree construction.\n     *\n     * @param segment - The route segment that this node represents.\n     * @returns A new, empty route tree node.\n     */\n    createEmptyRouteTreeNode(segment) {\n        return {\n            segment,\n            insertionIndex: -1,\n            children: new Map(),\n        };\n    }\n}\n//# sourceMappingURL=route-tree.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { APP_BASE_HREF, PlatformLocation } from '@angular/common';\nimport { APP_INITIALIZER, ApplicationRef, Compiler, inject, runInInjectionContext, ɵConsole, } from '@angular/core';\nimport { INITIAL_CONFIG, platformServer } from '@angular/platform-server';\nimport { Router, ɵloadChildren as loadChildrenHelper } from '@angular/router';\nimport { ServerAssets } from '../assets';\nimport { Console } from '../console';\nimport { getAngularAppManifest } from '../manifest';\nimport { isNgModule } from '../utils/ng';\nimport { promiseWithAbort } from '../utils/promise';\nimport { addTrailingSlash, joinUrlParts, stripLeadingSlash } from '../utils/url';\nimport { PrerenderFallback, RenderMode, SERVER_ROUTES_CONFIG, } from './route-config';\nimport { RouteTree } from './route-tree';\n/**\n * Regular expression to match segments preceded by a colon in a string.\n */\nconst URL_PARAMETER_REGEXP = /(?<!\\\\):([^/]+)/g;\n/**\n * An set of HTTP status codes that are considered valid for redirect responses.\n */\nconst VALID_REDIRECT_RESPONSE_CODES = new Set([301, 302, 303, 307, 308]);\n/**\n * Traverses an array of route configurations to generate route tree node metadata.\n *\n * This function processes each route and its children, handling redirects, SSG (Static Site Generation) settings,\n * and lazy-loaded routes. It yields route metadata for each route and its potential variants.\n *\n * @param options - The configuration options for traversing routes.\n * @returns An async iterable iterator yielding either route tree node metadata or an error object with an error message.\n */\nasync function* traverseRoutesConfig(options) {\n    const { routes, compiler, parentInjector, parentRoute, serverConfigRouteTree, invokeGetPrerenderParams, includePrerenderFallbackRoutes, } = options;\n    for (const route of routes) {\n        try {\n            const { path = '', redirectTo, loadChildren, children } = route;\n            const currentRoutePath = joinUrlParts(parentRoute, path);\n            // Get route metadata from the server config route tree, if available\n            let matchedMetaData;\n            if (serverConfigRouteTree) {\n                matchedMetaData = serverConfigRouteTree.match(currentRoutePath);\n                if (!matchedMetaData) {\n                    yield {\n                        error: `The '${stripLeadingSlash(currentRoutePath)}' route does not match any route defined in the server routing configuration. ` +\n                            'Please ensure this route is added to the server routing configuration.',\n                    };\n                    continue;\n                }\n                matchedMetaData.presentInClientRouter = true;\n            }\n            const metadata = {\n                renderMode: RenderMode.Prerender,\n                ...matchedMetaData,\n                // Match Angular router behavior\n                // ['one', 'two', ''] -> 'one/two/'\n                // ['one', 'two', 'three'] -> 'one/two/three'\n                route: path === '' ? addTrailingSlash(currentRoutePath) : currentRoutePath,\n            };\n            delete metadata.presentInClientRouter;\n            if (metadata.renderMode === RenderMode.Prerender) {\n                // Handle SSG routes\n                yield* handleSSGRoute(typeof redirectTo === 'string' ? redirectTo : undefined, metadata, parentInjector, invokeGetPrerenderParams, includePrerenderFallbackRoutes);\n            }\n            else if (typeof redirectTo === 'string') {\n                // Handle redirects\n                if (metadata.status && !VALID_REDIRECT_RESPONSE_CODES.has(metadata.status)) {\n                    yield {\n                        error: `The '${metadata.status}' status code is not a valid redirect response code. ` +\n                            `Please use one of the following redirect response codes: ${[...VALID_REDIRECT_RESPONSE_CODES.values()].join(', ')}.`,\n                    };\n                    continue;\n                }\n                yield { ...metadata, redirectTo: resolveRedirectTo(metadata.route, redirectTo) };\n            }\n            else {\n                yield metadata;\n            }\n            // Recursively process child routes\n            if (children?.length) {\n                yield* traverseRoutesConfig({\n                    ...options,\n                    routes: children,\n                    parentRoute: currentRoutePath,\n                });\n            }\n            // Load and process lazy-loaded child routes\n            if (loadChildren) {\n                const loadedChildRoutes = await loadChildrenHelper(route, compiler, parentInjector).toPromise();\n                if (loadedChildRoutes) {\n                    const { routes: childRoutes, injector = parentInjector } = loadedChildRoutes;\n                    yield* traverseRoutesConfig({\n                        ...options,\n                        routes: childRoutes,\n                        parentInjector: injector,\n                        parentRoute: currentRoutePath,\n                    });\n                }\n            }\n        }\n        catch (error) {\n            yield {\n                error: `Error processing route '${stripLeadingSlash(route.path ?? '')}': ${error.message}`,\n            };\n        }\n    }\n}\n/**\n * Handles SSG (Static Site Generation) routes by invoking `getPrerenderParams` and yielding\n * all parameterized paths, returning any errors encountered.\n *\n * @param redirectTo - Optional path to redirect to, if specified.\n * @param metadata - The metadata associated with the route tree node.\n * @param parentInjector - The dependency injection container for the parent route.\n * @param invokeGetPrerenderParams - A flag indicating whether to invoke the `getPrerenderParams` function.\n * @param includePrerenderFallbackRoutes - A flag indicating whether to include fallback routes in the result.\n * @returns An async iterable iterator that yields route tree node metadata for each SSG path or errors.\n */\nasync function* handleSSGRoute(redirectTo, metadata, parentInjector, invokeGetPrerenderParams, includePrerenderFallbackRoutes) {\n    if (metadata.renderMode !== RenderMode.Prerender) {\n        throw new Error(`'handleSSGRoute' was called for a route which rendering mode is not prerender.`);\n    }\n    const { route: currentRoutePath, fallback, ...meta } = metadata;\n    const getPrerenderParams = 'getPrerenderParams' in meta ? meta.getPrerenderParams : undefined;\n    if ('getPrerenderParams' in meta) {\n        delete meta['getPrerenderParams'];\n    }\n    if (redirectTo !== undefined) {\n        meta.redirectTo = resolveRedirectTo(currentRoutePath, redirectTo);\n    }\n    if (!URL_PARAMETER_REGEXP.test(currentRoutePath)) {\n        // Route has no parameters\n        yield {\n            ...meta,\n            route: currentRoutePath,\n        };\n        return;\n    }\n    if (invokeGetPrerenderParams) {\n        if (!getPrerenderParams) {\n            yield {\n                error: `The '${stripLeadingSlash(currentRoutePath)}' route uses prerendering and includes parameters, but 'getPrerenderParams' ` +\n                    `is missing. Please define 'getPrerenderParams' function for this route in your server routing configuration ` +\n                    `or specify a different 'renderMode'.`,\n            };\n            return;\n        }\n        const parameters = await runInInjectionContext(parentInjector, () => getPrerenderParams());\n        try {\n            for (const params of parameters) {\n                const routeWithResolvedParams = currentRoutePath.replace(URL_PARAMETER_REGEXP, (match) => {\n                    const parameterName = match.slice(1);\n                    const value = params[parameterName];\n                    if (typeof value !== 'string') {\n                        throw new Error(`The 'getPrerenderParams' function defined for the '${stripLeadingSlash(currentRoutePath)}' route ` +\n                            `returned a non-string value for parameter '${parameterName}'. ` +\n                            `Please make sure the 'getPrerenderParams' function returns values for all parameters ` +\n                            'specified in this route.');\n                    }\n                    return value;\n                });\n                yield {\n                    ...meta,\n                    route: routeWithResolvedParams,\n                    redirectTo: redirectTo === undefined\n                        ? undefined\n                        : resolveRedirectTo(routeWithResolvedParams, redirectTo),\n                };\n            }\n        }\n        catch (error) {\n            yield { error: `${error.message}` };\n            return;\n        }\n    }\n    // Handle fallback render modes\n    if (includePrerenderFallbackRoutes &&\n        (fallback !== PrerenderFallback.None || !invokeGetPrerenderParams)) {\n        yield {\n            ...meta,\n            route: currentRoutePath,\n            renderMode: fallback === PrerenderFallback.Client ? RenderMode.Client : RenderMode.Server,\n        };\n    }\n}\n/**\n * Resolves the `redirectTo` property for a given route.\n *\n * This function processes the `redirectTo` property to ensure that it correctly\n * resolves relative to the current route path. If `redirectTo` is an absolute path,\n * it is returned as is. If it is a relative path, it is resolved based on the current route path.\n *\n * @param routePath - The current route path.\n * @param redirectTo - The target path for redirection.\n * @returns The resolved redirect path as a string.\n */\nfunction resolveRedirectTo(routePath, redirectTo) {\n    if (redirectTo[0] === '/') {\n        // If the redirectTo path is absolute, return it as is.\n        return redirectTo;\n    }\n    // Resolve relative redirectTo based on the current route path.\n    const segments = routePath.replace(URL_PARAMETER_REGEXP, '*').split('/');\n    segments.pop(); // Remove the last segment to make it relative.\n    return joinUrlParts(...segments, redirectTo);\n}\n/**\n * Builds a server configuration route tree from the given server routes configuration.\n *\n * @param serverRoutesConfig - The server routes to be used for configuration.\n\n * @returns An object containing:\n * - `serverConfigRouteTree`: A populated `RouteTree` instance, which organizes the server routes\n *   along with their additional metadata.\n * - `errors`: An array of strings that list any errors encountered during the route tree construction\n *   process, such as invalid paths.\n */\nfunction buildServerConfigRouteTree({ routes, appShellRoute }) {\n    const serverRoutes = [...routes];\n    if (appShellRoute !== undefined) {\n        serverRoutes.unshift({\n            path: appShellRoute,\n            renderMode: RenderMode.Prerender,\n        });\n    }\n    const serverConfigRouteTree = new RouteTree();\n    const errors = [];\n    for (const { path, ...metadata } of serverRoutes) {\n        if (path[0] === '/') {\n            errors.push(`Invalid '${path}' route configuration: the path cannot start with a slash.`);\n            continue;\n        }\n        serverConfigRouteTree.insert(path, metadata);\n    }\n    return { serverConfigRouteTree, errors };\n}\n/**\n * Retrieves routes from the given Angular application.\n *\n * This function initializes an Angular platform, bootstraps the application or module,\n * and retrieves routes from the Angular router configuration. It handles both module-based\n * and function-based bootstrapping. It yields the resulting routes as `RouteTreeNodeMetadata` objects or errors.\n *\n * @param bootstrap - A function that returns a promise resolving to an `ApplicationRef` or an Angular module to bootstrap.\n * @param document - The initial HTML document used for server-side rendering.\n * This document is necessary to render the application on the server.\n * @param url - The URL for server-side rendering. The URL is used to configure `ServerPlatformLocation`. This configuration is crucial\n * for ensuring that API requests for relative paths succeed, which is essential for accurate route extraction.\n * @param invokeGetPrerenderParams - A boolean flag indicating whether to invoke `getPrerenderParams` for parameterized SSG routes\n * to handle prerendering paths. Defaults to `false`.\n * @param includePrerenderFallbackRoutes - A flag indicating whether to include fallback routes in the result. Defaults to `true`.\n *\n * @returns A promise that resolves to an object of type `AngularRouterConfigResult` or errors.\n */\nexport async function getRoutesFromAngularRouterConfig(bootstrap, document, url, invokeGetPrerenderParams = false, includePrerenderFallbackRoutes = true) {\n    const { protocol, host } = url;\n    // Create and initialize the Angular platform for server-side rendering.\n    const platformRef = platformServer([\n        {\n            provide: INITIAL_CONFIG,\n            useValue: { document, url: `${protocol}//${host}/` },\n        },\n        {\n            // An Angular Console Provider that does not print a set of predefined logs.\n            provide: ɵConsole,\n            // Using `useClass` would necessitate decorating `Console` with `@Injectable`,\n            // which would require switching from `ts_library` to `ng_module`. This change\n            // would also necessitate various patches of `@angular/bazel` to support ESM.\n            useFactory: () => new Console(),\n        },\n        {\n            // We cannot replace `ApplicationRef` with a different provider here due to the dependency injection (DI) hierarchy.\n            // This code is running at the platform level, where `ApplicationRef` is provided in the root injector.\n            // As a result, any attempt to replace it will cause the root provider to override the platform provider.\n            // TODO(alanagius): investigate exporting the app config directly which would help with: https://github.com/angular/angular/issues/59144\n            provide: APP_INITIALIZER,\n            multi: true,\n            useFactory: () => () => {\n                const appRef = inject(ApplicationRef);\n                appRef.bootstrap = () => undefined;\n            },\n        },\n    ]);\n    try {\n        let applicationRef;\n        if (isNgModule(bootstrap)) {\n            const moduleRef = await platformRef.bootstrapModule(bootstrap);\n            applicationRef = moduleRef.injector.get(ApplicationRef);\n        }\n        else {\n            applicationRef = await bootstrap();\n        }\n        // Wait until the application is stable.\n        await applicationRef.whenStable();\n        const injector = applicationRef.injector;\n        const router = injector.get(Router);\n        const routesResults = [];\n        const errors = [];\n        let baseHref = injector.get(APP_BASE_HREF, null, { optional: true }) ??\n            injector.get(PlatformLocation).getBaseHrefFromDOM();\n        if (baseHref.startsWith('./')) {\n            baseHref = baseHref.slice(2);\n        }\n        const compiler = injector.get(Compiler);\n        const serverRoutesConfig = injector.get(SERVER_ROUTES_CONFIG, null, { optional: true });\n        let serverConfigRouteTree;\n        if (serverRoutesConfig) {\n            const result = buildServerConfigRouteTree(serverRoutesConfig);\n            serverConfigRouteTree = result.serverConfigRouteTree;\n            errors.push(...result.errors);\n        }\n        if (errors.length) {\n            return {\n                baseHref,\n                routes: routesResults,\n                errors,\n            };\n        }\n        if (router.config.length) {\n            // Retrieve all routes from the Angular router configuration.\n            const traverseRoutes = traverseRoutesConfig({\n                routes: router.config,\n                compiler,\n                parentInjector: injector,\n                parentRoute: '',\n                serverConfigRouteTree,\n                invokeGetPrerenderParams,\n                includePrerenderFallbackRoutes,\n            });\n            for await (const result of traverseRoutes) {\n                if ('error' in result) {\n                    errors.push(result.error);\n                }\n                else {\n                    routesResults.push(result);\n                }\n            }\n            if (serverConfigRouteTree) {\n                for (const { route, presentInClientRouter } of serverConfigRouteTree.traverse()) {\n                    if (presentInClientRouter || route === '**') {\n                        // Skip if matched or it's the catch-all route.\n                        continue;\n                    }\n                    errors.push(`The '${route}' server route does not match any routes defined in the Angular ` +\n                        `routing configuration (typically provided as a part of the 'provideRouter' call). ` +\n                        'Please make sure that the mentioned server route is present in the Angular routing configuration.');\n                }\n            }\n        }\n        else {\n            const rootRouteMetadata = serverConfigRouteTree?.match('') ?? {\n                route: '',\n                renderMode: RenderMode.Prerender,\n            };\n            routesResults.push({\n                ...rootRouteMetadata,\n                // Matched route might be `/*` or `/**`, which would make Angular serve all routes rather than just `/`.\n                // So we limit to just `/` for the empty app router case.\n                route: '',\n            });\n        }\n        return {\n            baseHref,\n            routes: routesResults,\n            errors,\n            appShellRoute: serverRoutesConfig?.appShellRoute,\n        };\n    }\n    finally {\n        platformRef.destroy();\n    }\n}\n/**\n * Asynchronously extracts routes from the Angular application configuration\n * and creates a `RouteTree` to manage server-side routing.\n *\n * @param options - An object containing the following options:\n *  - `url`: The URL for server-side rendering. The URL is used to configure `ServerPlatformLocation`. This configuration is crucial\n *     for ensuring that API requests for relative paths succeed, which is essential for accurate route extraction.\n *     See:\n *      - https://github.com/angular/angular/blob/d608b857c689d17a7ffa33bbb510301014d24a17/packages/platform-server/src/location.ts#L51\n *      - https://github.com/angular/angular/blob/6882cc7d9eed26d3caeedca027452367ba25f2b9/packages/platform-server/src/http.ts#L44\n *  - `manifest`: An optional `AngularAppManifest` that contains the application's routing and configuration details.\n *     If not provided, the default manifest is retrieved using `getAngularAppManifest()`.\n *  - `invokeGetPrerenderParams`: A boolean flag indicating whether to invoke `getPrerenderParams` for parameterized SSG routes\n *     to handle prerendering paths. Defaults to `false`.\n *  - `includePrerenderFallbackRoutes`: A flag indicating whether to include fallback routes in the result. Defaults to `true`.\n *  - `signal`: An optional `AbortSignal` that can be used to abort the operation.\n *\n * @returns A promise that resolves to an object containing:\n *  - `routeTree`: A populated `RouteTree` containing all extracted routes from the Angular application.\n *  - `appShellRoute`: The specified route for the app-shell, if configured.\n *  - `errors`: An array of strings representing any errors encountered during the route extraction process.\n */\nexport function extractRoutesAndCreateRouteTree(options) {\n    const { url, manifest = getAngularAppManifest(), invokeGetPrerenderParams = false, includePrerenderFallbackRoutes = true, signal, } = options;\n    async function extract() {\n        const routeTree = new RouteTree();\n        const document = await new ServerAssets(manifest).getIndexServerHtml().text();\n        const bootstrap = await manifest.bootstrap();\n        const { baseHref, appShellRoute, routes, errors } = await getRoutesFromAngularRouterConfig(bootstrap, document, url, invokeGetPrerenderParams, includePrerenderFallbackRoutes);\n        for (const { route, ...metadata } of routes) {\n            if (metadata.redirectTo !== undefined) {\n                metadata.redirectTo = joinUrlParts(baseHref, metadata.redirectTo);\n            }\n            // Remove undefined fields\n            // Helps avoid unnecessary test updates\n            for (const [key, value] of Object.entries(metadata)) {\n                if (value === undefined) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    delete metadata[key];\n                }\n            }\n            const fullRoute = joinUrlParts(baseHref, route);\n            routeTree.insert(fullRoute, metadata);\n        }\n        return {\n            appShellRoute,\n            routeTree,\n            errors,\n        };\n    }\n    return signal ? promiseWithAbort(extract(), signal, 'Routes extraction') : extract();\n}\n//# sourceMappingURL=ng-routes.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Manages a collection of hooks and provides methods to register and execute them.\n * Hooks are functions that can be invoked with specific arguments to allow modifications or enhancements.\n */\nexport class Hooks {\n    /**\n     * A map of hook names to arrays of hook functions.\n     * Each hook name can have multiple associated functions, which are executed in sequence.\n     */\n    store = new Map();\n    /**\n     * Executes all hooks associated with the specified name, passing the given argument to each hook function.\n     * The hooks are invoked sequentially, and the argument may be modified by each hook.\n     *\n     * @template Hook - The type of the hook name. It should be one of the keys of `HooksMapping`.\n     * @param name - The name of the hook whose functions will be executed.\n     * @param context - The input value to be passed to each hook function. The value is mutated by each hook function.\n     * @returns A promise that resolves once all hook functions have been executed.\n     *\n     * @example\n     * ```typescript\n     * const hooks = new Hooks();\n     * hooks.on('html:transform:pre', async (ctx) => {\n     *   ctx.html = ctx.html.replace(/foo/g, 'bar');\n     *   return ctx.html;\n     * });\n     * const result = await hooks.run('html:transform:pre', { html: '<div>foo</div>' });\n     * console.log(result); // '<div>bar</div>'\n     * ```\n     * @internal\n     */\n    async run(name, context) {\n        const hooks = this.store.get(name);\n        switch (name) {\n            case 'html:transform:pre': {\n                if (!hooks) {\n                    return context.html;\n                }\n                const ctx = { ...context };\n                for (const hook of hooks) {\n                    ctx.html = await hook(ctx);\n                }\n                return ctx.html;\n            }\n            default:\n                throw new Error(`Running hook \"${name}\" is not supported.`);\n        }\n    }\n    /**\n     * Registers a new hook function under the specified hook name.\n     * This function should be a function that takes an argument of type `T` and returns a `string` or `Promise<string>`.\n     *\n     * @template Hook - The type of the hook name. It should be one of the keys of `HooksMapping`.\n     * @param name - The name of the hook under which the function will be registered.\n     * @param handler - A function to be executed when the hook is triggered. The handler will be called with an argument\n     *                  that may be modified by the hook functions.\n     *\n     * @remarks\n     * - If there are existing handlers registered under the given hook name, the new handler will be added to the list.\n     * - If no handlers are registered under the given hook name, a new list will be created with the handler as its first element.\n     *\n     * @example\n     * ```typescript\n     * hooks.on('html:transform:pre', async (ctx) => {\n     *   return ctx.html.replace(/foo/g, 'bar');\n     * });\n     * ```\n     */\n    on(name, handler) {\n        const hooks = this.store.get(name);\n        if (hooks) {\n            hooks.push(handler);\n        }\n        else {\n            this.store.set(name, [handler]);\n        }\n    }\n    /**\n     * Checks if there are any hooks registered under the specified name.\n     *\n     * @param name - The name of the hook to check.\n     * @returns `true` if there are hooks registered under the specified name, otherwise `false`.\n     */\n    has(name) {\n        return !!this.store.get(name)?.length;\n    }\n}\n//# sourceMappingURL=hooks.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { stripIndexHtmlFromURL } from '../utils/url';\nimport { extractRoutesAndCreateRouteTree } from './ng-routes';\nimport { RouteTree } from './route-tree';\n/**\n * Manages the application's server routing logic by building and maintaining a route tree.\n *\n * This class is responsible for constructing the route tree from the Angular application\n * configuration and using it to match incoming requests to the appropriate routes.\n */\nexport class ServerRouter {\n    routeTree;\n    /**\n     * Creates an instance of the `ServerRouter`.\n     *\n     * @param routeTree - An instance of `RouteTree` that holds the routing information.\n     * The `RouteTree` is used to match request URLs to the appropriate route metadata.\n     */\n    constructor(routeTree) {\n        this.routeTree = routeTree;\n    }\n    /**\n     * Static property to track the ongoing build promise.\n     */\n    static #extractionPromise;\n    /**\n     * Creates or retrieves a `ServerRouter` instance based on the provided manifest and URL.\n     *\n     * If the manifest contains pre-built routes, a new `ServerRouter` is immediately created.\n     * Otherwise, it builds the router by extracting routes from the Angular configuration\n     * asynchronously. This method ensures that concurrent builds are prevented by re-using\n     * the same promise.\n     *\n     * @param manifest - An instance of `AngularAppManifest` that contains the route information.\n     * @param url - The URL for server-side rendering. The URL is needed to configure `ServerPlatformLocation`.\n     * This is necessary to ensure that API requests for relative paths succeed, which is crucial for correct route extraction.\n     * [Reference](https://github.com/angular/angular/blob/d608b857c689d17a7ffa33bbb510301014d24a17/packages/platform-server/src/location.ts#L51)\n     * @returns A promise resolving to a `ServerRouter` instance.\n     */\n    static from(manifest, url) {\n        if (manifest.routes) {\n            const routeTree = RouteTree.fromObject(manifest.routes);\n            return Promise.resolve(new ServerRouter(routeTree));\n        }\n        // Create and store a new promise for the build process.\n        // This prevents concurrent builds by re-using the same promise.\n        ServerRouter.#extractionPromise ??= extractRoutesAndCreateRouteTree({ url, manifest })\n            .then(({ routeTree, errors }) => {\n            if (errors.length > 0) {\n                throw new Error('Error(s) occurred while extracting routes:\\n' +\n                    errors.map((error) => `- ${error}`).join('\\n'));\n            }\n            return new ServerRouter(routeTree);\n        })\n            .finally(() => {\n            ServerRouter.#extractionPromise = undefined;\n        });\n        return ServerRouter.#extractionPromise;\n    }\n    /**\n     * Matches a request URL against the route tree to retrieve route metadata.\n     *\n     * This method strips 'index.html' from the URL if it is present and then attempts\n     * to find a match in the route tree. If a match is found, it returns the associated\n     * route metadata; otherwise, it returns `undefined`.\n     *\n     * @param url - The URL to be matched against the route tree.\n     * @returns The metadata for the matched route or `undefined` if no match is found.\n     */\n    match(url) {\n        // Strip 'index.html' from URL if present.\n        // A request to `http://www.example.com/page/index.html` will render the Angular route corresponding to `http://www.example.com/page`.\n        const { pathname } = stripIndexHtmlFromURL(url);\n        return this.routeTree.match(decodeURIComponent(pathname));\n    }\n}\n//# sourceMappingURL=router.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Generates a SHA-256 hash of the provided string.\n *\n * @param data - The input string to be hashed.\n * @returns A promise that resolves to the SHA-256 hash of the input,\n * represented as a hexadecimal string.\n */\nexport async function sha256(data) {\n    const encodedData = new TextEncoder().encode(data);\n    const hashBuffer = await crypto.subtle.digest('SHA-256', encodedData);\n    const hashParts = [];\n    for (const h of new Uint8Array(hashBuffer)) {\n        hashParts.push(h.toString(16).padStart(2, '0'));\n    }\n    return hashParts.join('');\n}\n//# sourceMappingURL=crypto.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport Beasties from '../../third_party/beasties';\n/**\n * Pattern used to extract the media query set by Beasties in an `onload` handler.\n */\nconst MEDIA_SET_HANDLER_PATTERN = /^this\\.media=[\"'](.*)[\"'];?$/;\n/**\n * Name of the attribute used to save the Beasties media query so it can be re-assigned on load.\n */\nconst CSP_MEDIA_ATTR = 'ngCspMedia';\n/**\n * Script that dynamically updates the `media` attribute of `<link>` tags based on a custom attribute (`CSP_MEDIA_ATTR`).\n *\n * NOTE:\n * We do not use `document.querySelectorAll('link').forEach((s) => s.addEventListener('load', ...)`\n * because load events are not always triggered reliably on Chrome.\n * See: https://github.com/angular/angular-cli/issues/26932 and https://crbug.com/1521256\n *\n * The script:\n * - Ensures the event target is a `<link>` tag with the `CSP_MEDIA_ATTR` attribute.\n * - Updates the `media` attribute with the value of `CSP_MEDIA_ATTR` and then removes the attribute.\n * - Removes the event listener when all relevant `<link>` tags have been processed.\n * - Uses event capturing (the `true` parameter) since load events do not bubble up the DOM.\n */\nconst LINK_LOAD_SCRIPT_CONTENT = `\n(() => {\n  const CSP_MEDIA_ATTR = '${CSP_MEDIA_ATTR}';\n  const documentElement = document.documentElement;\n\n  // Listener for load events on link tags.\n  const listener = (e) => {\n    const target = e.target;\n    if (\n      !target ||\n      target.tagName !== 'LINK' ||\n      !target.hasAttribute(CSP_MEDIA_ATTR)\n    ) {\n      return;\n    }\n\n    target.media = target.getAttribute(CSP_MEDIA_ATTR);\n    target.removeAttribute(CSP_MEDIA_ATTR);\n\n    if (!document.head.querySelector(\\`link[\\${CSP_MEDIA_ATTR}]\\`)) {\n      documentElement.removeEventListener('load', listener);\n    }\n  };\n\n  documentElement.addEventListener('load', listener, true);\n})();`;\nclass BeastiesBase extends Beasties {\n}\n/* eslint-enable @typescript-eslint/no-unsafe-declaration-merging */\nexport class InlineCriticalCssProcessor extends BeastiesBase {\n    readFile;\n    outputPath;\n    addedCspScriptsDocuments = new WeakSet();\n    documentNonces = new WeakMap();\n    constructor(readFile, outputPath) {\n        super({\n            logger: {\n                // eslint-disable-next-line no-console\n                warn: (s) => console.warn(s),\n                // eslint-disable-next-line no-console\n                error: (s) => console.error(s),\n                info: () => { },\n            },\n            logLevel: 'warn',\n            path: outputPath,\n            publicPath: undefined,\n            compress: false,\n            pruneSource: false,\n            reduceInlineStyles: false,\n            mergeStylesheets: false,\n            // Note: if `preload` changes to anything other than `media`, the logic in\n            // `embedLinkedStylesheet` will have to be updated.\n            preload: 'media',\n            noscriptFallback: true,\n            inlineFonts: true,\n        });\n        this.readFile = readFile;\n        this.outputPath = outputPath;\n    }\n    /**\n     * Override of the Beasties `embedLinkedStylesheet` method\n     * that makes it work with Angular's CSP APIs.\n     */\n    async embedLinkedStylesheet(link, document) {\n        if (link.getAttribute('media') === 'print' && link.next?.name === 'noscript') {\n            // Workaround for https://github.com/GoogleChromeLabs/critters/issues/64\n            // NB: this is only needed for the webpack based builders.\n            const media = link.getAttribute('onload')?.match(MEDIA_SET_HANDLER_PATTERN);\n            if (media) {\n                link.removeAttribute('onload');\n                link.setAttribute('media', media[1]);\n                link?.next?.remove();\n            }\n        }\n        const returnValue = await super.embedLinkedStylesheet(link, document);\n        const cspNonce = this.findCspNonce(document);\n        if (cspNonce) {\n            const beastiesMedia = link.getAttribute('onload')?.match(MEDIA_SET_HANDLER_PATTERN);\n            if (beastiesMedia) {\n                // If there's a Beasties-generated `onload` handler and the file has an Angular CSP nonce,\n                // we have to remove the handler, because it's incompatible with CSP. We save the value\n                // in a different attribute and we generate a script tag with the nonce that uses\n                // `addEventListener` to apply the media query instead.\n                link.removeAttribute('onload');\n                link.setAttribute(CSP_MEDIA_ATTR, beastiesMedia[1]);\n                this.conditionallyInsertCspLoadingScript(document, cspNonce, link);\n            }\n            // Ideally we would hook in at the time Beasties inserts the `style` tags, but there isn't\n            // a way of doing that at the moment so we fall back to doing it any time a `link` tag is\n            // inserted. We mitigate it by only iterating the direct children of the `<head>` which\n            // should be pretty shallow.\n            document.head.children.forEach((child) => {\n                if (child.tagName === 'style' && !child.hasAttribute('nonce')) {\n                    child.setAttribute('nonce', cspNonce);\n                }\n            });\n        }\n        return returnValue;\n    }\n    /**\n     * Finds the CSP nonce for a specific document.\n     */\n    findCspNonce(document) {\n        if (this.documentNonces.has(document)) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return this.documentNonces.get(document);\n        }\n        // HTML attribute are case-insensitive, but the parser used by Beasties is case-sensitive.\n        const nonceElement = document.querySelector('[ngCspNonce], [ngcspnonce]');\n        const cspNonce = nonceElement?.getAttribute('ngCspNonce') || nonceElement?.getAttribute('ngcspnonce') || null;\n        this.documentNonces.set(document, cspNonce);\n        return cspNonce;\n    }\n    /**\n     * Inserts the `script` tag that swaps the critical CSS at runtime,\n     * if one hasn't been inserted into the document already.\n     */\n    conditionallyInsertCspLoadingScript(document, nonce, link) {\n        if (this.addedCspScriptsDocuments.has(document)) {\n            return;\n        }\n        if (document.head.textContent.includes(LINK_LOAD_SCRIPT_CONTENT)) {\n            // Script was already added during the build.\n            this.addedCspScriptsDocuments.add(document);\n            return;\n        }\n        const script = document.createElement('script');\n        script.setAttribute('nonce', nonce);\n        script.textContent = LINK_LOAD_SCRIPT_CONTENT;\n        // Prepend the script to the head since it needs to\n        // run as early as possible, before the `link` tags.\n        document.head.insertBefore(script, link);\n        this.addedCspScriptsDocuments.add(document);\n    }\n}\n//# sourceMappingURL=inline-critical-css.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * A Least Recently Used (LRU) cache implementation.\n *\n * This cache stores a fixed number of key-value pairs, and when the cache exceeds its capacity,\n * the least recently accessed items are evicted.\n *\n * @template Key - The type of the cache keys.\n * @template Value - The type of the cache values.\n */\nexport class LRUCache {\n    /**\n     * The maximum number of items the cache can hold.\n     */\n    capacity;\n    /**\n     * Internal storage for the cache, mapping keys to their associated nodes in the linked list.\n     */\n    cache = new Map();\n    /**\n     * Head of the doubly linked list, representing the most recently used item.\n     */\n    head;\n    /**\n     * Tail of the doubly linked list, representing the least recently used item.\n     */\n    tail;\n    /**\n     * Creates a new LRUCache instance.\n     * @param capacity The maximum number of items the cache can hold.\n     */\n    constructor(capacity) {\n        this.capacity = capacity;\n    }\n    /**\n     * Gets the value associated with the given key.\n     * @param key The key to retrieve the value for.\n     * @returns The value associated with the key, or undefined if the key is not found.\n     */\n    get(key) {\n        const node = this.cache.get(key);\n        if (node) {\n            this.moveToHead(node);\n            return node.value;\n        }\n        return undefined;\n    }\n    /**\n     * Puts a key-value pair into the cache.\n     * If the key already exists, the value is updated.\n     * If the cache is full, the least recently used item is evicted.\n     * @param key The key to insert or update.\n     * @param value The value to associate with the key.\n     */\n    put(key, value) {\n        const cachedNode = this.cache.get(key);\n        if (cachedNode) {\n            // Update existing node\n            cachedNode.value = value;\n            this.moveToHead(cachedNode);\n            return;\n        }\n        // Create a new node\n        const newNode = { key, value, prev: undefined, next: undefined };\n        this.cache.set(key, newNode);\n        this.addToHead(newNode);\n        if (this.cache.size > this.capacity) {\n            // Evict the LRU item\n            const tail = this.removeTail();\n            if (tail) {\n                this.cache.delete(tail.key);\n            }\n        }\n    }\n    /**\n     * Adds a node to the head of the linked list.\n     * @param node The node to add.\n     */\n    addToHead(node) {\n        node.next = this.head;\n        node.prev = undefined;\n        if (this.head) {\n            this.head.prev = node;\n        }\n        this.head = node;\n        if (!this.tail) {\n            this.tail = node;\n        }\n    }\n    /**\n     * Removes a node from the linked list.\n     * @param node The node to remove.\n     */\n    removeNode(node) {\n        if (node.prev) {\n            node.prev.next = node.next;\n        }\n        else {\n            this.head = node.next;\n        }\n        if (node.next) {\n            node.next.prev = node.prev;\n        }\n        else {\n            this.tail = node.prev;\n        }\n    }\n    /**\n     * Moves a node to the head of the linked list.\n     * @param node The node to move.\n     */\n    moveToHead(node) {\n        this.removeNode(node);\n        this.addToHead(node);\n    }\n    /**\n     * Removes the tail node from the linked list.\n     * @returns The removed tail node, or undefined if the list is empty.\n     */\n    removeTail() {\n        const node = this.tail;\n        if (node) {\n            this.removeNode(node);\n        }\n        return node;\n    }\n}\n//# sourceMappingURL=lru-cache.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { LOCALE_ID, REQUEST, REQUEST_CONTEXT, RESPONSE_INIT, ɵresetCompiledComponents, } from '@angular/core';\nimport { ServerAssets } from './assets';\nimport { Hooks } from './hooks';\nimport { getAngularAppManifest } from './manifest';\nimport { RenderMode } from './routes/route-config';\nimport { ServerRouter } from './routes/router';\nimport { sha256 } from './utils/crypto';\nimport { InlineCriticalCssProcessor } from './utils/inline-critical-css';\nimport { LRUCache } from './utils/lru-cache';\nimport { renderAngular } from './utils/ng';\nimport { promiseWithAbort } from './utils/promise';\nimport { buildPathWithParams, joinUrlParts, stripLeadingSlash } from './utils/url';\n/**\n * Maximum number of critical CSS entries the cache can store.\n * This value determines the capacity of the LRU (Least Recently Used) cache, which stores critical CSS for pages.\n */\nconst MAX_INLINE_CSS_CACHE_ENTRIES = 50;\n/**\n * A mapping of `RenderMode` enum values to corresponding string representations.\n *\n * This record is used to map each `RenderMode` to a specific string value that represents\n * the server context. The string values are used internally to differentiate\n * between various rendering strategies when processing routes.\n *\n * - `RenderMode.Prerender` maps to `'ssg'` (Static Site Generation).\n * - `RenderMode.Server` maps to `'ssr'` (Server-Side Rendering).\n * - `RenderMode.Client` maps to an empty string `''` (Client-Side Rendering, no server context needed).\n */\nconst SERVER_CONTEXT_VALUE = {\n    [RenderMode.Prerender]: 'ssg',\n    [RenderMode.Server]: 'ssr',\n    [RenderMode.Client]: '',\n};\n/**\n * Represents a locale-specific Angular server application managed by the server application engine.\n *\n * The `AngularServerApp` class handles server-side rendering and asset management for a specific locale.\n */\nexport class AngularServerApp {\n    options;\n    /**\n     * Whether prerendered routes should be rendered on demand or served directly.\n     *\n     * @see {@link AngularServerAppOptions.allowStaticRouteRender} for more details.\n     */\n    allowStaticRouteRender;\n    /**\n     * Hooks for extending or modifying server behavior.\n     *\n     * @see {@link AngularServerAppOptions.hooks} for more details.\n     */\n    hooks;\n    /**\n     * Constructs an instance of `AngularServerApp`.\n     *\n     * @param options Optional configuration options for the server application.\n     */\n    constructor(options = {}) {\n        this.options = options;\n        this.allowStaticRouteRender = this.options.allowStaticRouteRender ?? false;\n        this.hooks = options.hooks ?? new Hooks();\n    }\n    /**\n     * The manifest associated with this server application.\n     */\n    manifest = getAngularAppManifest();\n    /**\n     * An instance of ServerAsset that handles server-side asset.\n     */\n    assets = new ServerAssets(this.manifest);\n    /**\n     * The router instance used for route matching and handling.\n     */\n    router;\n    /**\n     * The `inlineCriticalCssProcessor` is responsible for handling critical CSS inlining.\n     */\n    inlineCriticalCssProcessor;\n    /**\n     * The bootstrap mechanism for the server application.\n     */\n    boostrap;\n    /**\n     * Cache for storing critical CSS for pages.\n     * Stores a maximum of MAX_INLINE_CSS_CACHE_ENTRIES entries.\n     *\n     * Uses an LRU (Least Recently Used) eviction policy, meaning that when the cache is full,\n     * the least recently accessed page's critical CSS will be removed to make space for new entries.\n     */\n    criticalCssLRUCache = new LRUCache(MAX_INLINE_CSS_CACHE_ENTRIES);\n    /**\n     * Handles an incoming HTTP request by serving prerendered content, performing server-side rendering,\n     * or delivering a static file for client-side rendered routes based on the `RenderMode` setting.\n     *\n     * @param request - The HTTP request to handle.\n     * @param requestContext - Optional context for rendering, such as metadata associated with the request.\n     * @returns A promise that resolves to the resulting HTTP response object, or `null` if no matching Angular route is found.\n     *\n     * @remarks A request to `https://www.example.com/page/index.html` will serve or render the Angular route\n     * corresponding to `https://www.example.com/page`.\n     */\n    async handle(request, requestContext) {\n        const url = new URL(request.url);\n        this.router ??= await ServerRouter.from(this.manifest, url);\n        const matchedRoute = this.router.match(url);\n        if (!matchedRoute) {\n            // Not a known Angular route.\n            return null;\n        }\n        const { redirectTo, status, renderMode } = matchedRoute;\n        if (redirectTo !== undefined) {\n            return Response.redirect(new URL(buildPathWithParams(redirectTo, url.pathname), url), \n            // Note: The status code is validated during route extraction.\n            // 302 Found is used by default for redirections\n            // See: https://developer.mozilla.org/en-US/docs/Web/API/Response/redirect_static#status\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            status ?? 302);\n        }\n        if (renderMode === RenderMode.Prerender) {\n            const response = await this.handleServe(request, matchedRoute);\n            if (response) {\n                return response;\n            }\n        }\n        return promiseWithAbort(this.handleRendering(request, matchedRoute, requestContext), request.signal, `Request for: ${request.url}`);\n    }\n    /**\n     * Handles serving a prerendered static asset if available for the matched route.\n     *\n     * This method only supports `GET` and `HEAD` requests.\n     *\n     * @param request - The incoming HTTP request for serving a static page.\n     * @param matchedRoute - The metadata of the matched route for rendering.\n     * If not provided, the method attempts to find a matching route based on the request URL.\n     * @returns A promise that resolves to a `Response` object if the prerendered page is found, or `null`.\n     */\n    async handleServe(request, matchedRoute) {\n        const { headers, renderMode } = matchedRoute;\n        if (renderMode !== RenderMode.Prerender) {\n            return null;\n        }\n        const { method } = request;\n        if (method !== 'GET' && method !== 'HEAD') {\n            return null;\n        }\n        const assetPath = this.buildServerAssetPathFromRequest(request);\n        const { manifest: { locale }, assets, } = this;\n        if (!assets.hasServerAsset(assetPath)) {\n            return null;\n        }\n        const { text, hash, size } = assets.getServerAsset(assetPath);\n        const etag = `\"${hash}\"`;\n        return request.headers.get('if-none-match') === etag\n            ? new Response(undefined, { status: 304, statusText: 'Not Modified' })\n            : new Response(await text(), {\n                headers: {\n                    'Content-Length': size.toString(),\n                    'ETag': etag,\n                    'Content-Type': 'text/html;charset=UTF-8',\n                    ...(locale !== undefined ? { 'Content-Language': locale } : {}),\n                    ...headers,\n                },\n            });\n    }\n    /**\n     * Handles the server-side rendering process for the given HTTP request.\n     * This method matches the request URL to a route and performs rendering if a matching route is found.\n     *\n     * @param request - The incoming HTTP request to be processed.\n     * @param matchedRoute - The metadata of the matched route for rendering.\n     * If not provided, the method attempts to find a matching route based on the request URL.\n     * @param requestContext - Optional additional context for rendering, such as request metadata.\n     *\n     * @returns A promise that resolves to the rendered response, or null if no matching route is found.\n     */\n    async handleRendering(request, matchedRoute, requestContext) {\n        const { renderMode, headers, status } = matchedRoute;\n        if (!this.allowStaticRouteRender && renderMode === RenderMode.Prerender) {\n            return null;\n        }\n        const url = new URL(request.url);\n        const platformProviders = [];\n        const { manifest: { bootstrap, inlineCriticalCss, locale }, assets, } = this;\n        // Initialize the response with status and headers if available.\n        const responseInit = {\n            status,\n            headers: new Headers({\n                'Content-Type': 'text/html;charset=UTF-8',\n                ...(locale !== undefined ? { 'Content-Language': locale } : {}),\n                ...headers,\n            }),\n        };\n        if (renderMode === RenderMode.Server) {\n            // Configure platform providers for request and response only for SSR.\n            platformProviders.push({\n                provide: REQUEST,\n                useValue: request,\n            }, {\n                provide: REQUEST_CONTEXT,\n                useValue: requestContext,\n            }, {\n                provide: RESPONSE_INIT,\n                useValue: responseInit,\n            });\n        }\n        else if (renderMode === RenderMode.Client) {\n            // Serve the client-side rendered version if the route is configured for CSR.\n            let html = await assets.getServerAsset('index.csr.html').text();\n            html = await this.runTransformsOnHtml(html, url);\n            return new Response(html, responseInit);\n        }\n        if (locale !== undefined) {\n            platformProviders.push({\n                provide: LOCALE_ID,\n                useValue: locale,\n            });\n        }\n        this.boostrap ??= await bootstrap();\n        let html = await assets.getIndexServerHtml().text();\n        html = await this.runTransformsOnHtml(html, url);\n        html = await renderAngular(html, this.boostrap, url, platformProviders, SERVER_CONTEXT_VALUE[renderMode]);\n        if (inlineCriticalCss) {\n            // Optionally inline critical CSS.\n            this.inlineCriticalCssProcessor ??= new InlineCriticalCssProcessor((path) => {\n                const fileName = path.split('/').pop() ?? path;\n                return this.assets.getServerAsset(fileName).text();\n            });\n            // TODO(alanagius): remove once Node.js version 18 is no longer supported.\n            if (renderMode === RenderMode.Server && typeof crypto === 'undefined') {\n                // eslint-disable-next-line no-console\n                console.error(`The global 'crypto' module is unavailable. ` +\n                    `If you are running on Node.js, please ensure you are using version 20 or later, ` +\n                    `which includes built-in support for the Web Crypto module.`);\n            }\n            if (renderMode === RenderMode.Server && typeof crypto !== 'undefined') {\n                // Only cache if we are running in SSR Mode.\n                const cacheKey = await sha256(html);\n                let htmlWithCriticalCss = this.criticalCssLRUCache.get(cacheKey);\n                if (htmlWithCriticalCss === undefined) {\n                    htmlWithCriticalCss = await this.inlineCriticalCssProcessor.process(html);\n                    this.criticalCssLRUCache.put(cacheKey, htmlWithCriticalCss);\n                }\n                html = htmlWithCriticalCss;\n            }\n            else {\n                html = await this.inlineCriticalCssProcessor.process(html);\n            }\n        }\n        return new Response(html, responseInit);\n    }\n    /**\n     * Constructs the asset path on the server based on the provided HTTP request.\n     *\n     * This method processes the incoming request URL to derive a path corresponding\n     * to the requested asset. It ensures the path points to the correct file (e.g.,\n     * `index.html`) and removes any base href if it is not part of the asset path.\n     *\n     * @param request - The incoming HTTP request object.\n     * @returns The server-relative asset path derived from the request.\n     */\n    buildServerAssetPathFromRequest(request) {\n        let { pathname: assetPath } = new URL(request.url);\n        if (!assetPath.endsWith('/index.html')) {\n            // Append \"index.html\" to build the default asset path.\n            assetPath = joinUrlParts(assetPath, 'index.html');\n        }\n        const { baseHref } = this.manifest;\n        // Check if the asset path starts with the base href and the base href is not (`/` or ``).\n        if (baseHref.length > 1 && assetPath.startsWith(baseHref)) {\n            // Remove the base href from the start of the asset path to align with server-asset expectations.\n            assetPath = assetPath.slice(baseHref.length);\n        }\n        return stripLeadingSlash(assetPath);\n    }\n    /**\n     * Runs the registered transform hooks on the given HTML content.\n     *\n     * @param html - The raw HTML content to be transformed.\n     * @param url - The URL associated with the HTML content, used for context during transformations.\n     * @returns A promise that resolves to the transformed HTML string.\n     */\n    async runTransformsOnHtml(html, url) {\n        if (this.hooks.has('html:transform:pre')) {\n            html = await this.hooks.run('html:transform:pre', { html, url });\n        }\n        return html;\n    }\n}\nlet angularServerApp;\n/**\n * Retrieves or creates an instance of `AngularServerApp`.\n * - If an instance of `AngularServerApp` already exists, it will return the existing one.\n * - If no instance exists, it will create a new one with the provided options.\n *\n * @param options Optional configuration options for the server application.\n *\n * @returns The existing or newly created instance of `AngularServerApp`.\n */\nexport function getOrCreateAngularServerApp(options) {\n    return (angularServerApp ??= new AngularServerApp(options));\n}\n/**\n * Destroys the existing `AngularServerApp` instance, releasing associated resources and resetting the\n * reference to `undefined`.\n *\n * This function is primarily used to enable the recreation of the `AngularServerApp` instance,\n * typically when server configuration or application state needs to be refreshed.\n */\nexport function destroyAngularServerApp() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // Need to clean up GENERATED_COMP_IDS map in `@angular/core`.\n        // Otherwise an incorrect component ID generation collision detected warning will be displayed in development.\n        // See: https://github.com/angular/angular-cli/issues/25924\n        ɵresetCompiledComponents();\n    }\n    angularServerApp = undefined;\n}\n//# sourceMappingURL=app.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n// ɵgetRoutesFromAngularRouterConfig is only used by the Webpack based server builder.\nexport { getRoutesFromAngularRouterConfig as ɵgetRoutesFromAngularRouterConfig, extractRoutesAndCreateRouteTree as ɵextractRoutesAndCreateRouteTree, } from './src/routes/ng-routes';\nexport { getOrCreateAngularServerApp as ɵgetOrCreateAngularServerApp, destroyAngularServerApp as ɵdestroyAngularServerApp, } from './src/app';\nexport { setAngularAppManifest as ɵsetAngularAppManifest, setAngularAppEngineManifest as ɵsetAngularAppEngineManifest, } from './src/manifest';\nexport { InlineCriticalCssProcessor as ɵInlineCriticalCssProcessor } from './src/utils/inline-critical-css';\n//# sourceMappingURL=private_export.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Extracts a potential locale ID from a given URL based on the specified base path.\n *\n * This function parses the URL to locate a potential locale identifier that immediately\n * follows the base path segment in the URL's pathname. If the URL does not contain a valid\n * locale ID, an empty string is returned.\n *\n * @param url - The full URL from which to extract the locale ID.\n * @param basePath - The base path used as the reference point for extracting the locale ID.\n * @returns The extracted locale ID if present, or an empty string if no valid locale ID is found.\n *\n * @example\n * ```js\n * const url = new URL('https://example.com/base/en/page');\n * const basePath = '/base';\n * const localeId = getPotentialLocaleIdFromUrl(url, basePath);\n * console.log(localeId); // Output: 'en'\n * ```\n */\nexport function getPotentialLocaleIdFromUrl(url, basePath) {\n    const { pathname } = url;\n    // Move forward of the base path section.\n    let start = basePath.length;\n    if (pathname[start] === '/') {\n        start++;\n    }\n    // Find the next forward slash.\n    let end = pathname.indexOf('/', start);\n    if (end === -1) {\n        end = pathname.length;\n    }\n    // Extract the potential locale id.\n    return pathname.slice(start, end);\n}\n//# sourceMappingURL=i18n.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { Hooks } from './hooks';\nimport { getPotentialLocaleIdFromUrl } from './i18n';\nimport { getAngularAppEngineManifest } from './manifest';\n/**\n * Angular server application engine.\n * Manages Angular server applications (including localized ones), handles rendering requests,\n * and optionally transforms index HTML before rendering.\n *\n * @remarks This class should be instantiated once and used as a singleton across the server-side\n * application to ensure consistent handling of rendering requests and resource management.\n *\n * @developerPreview\n */\nexport class AngularAppEngine {\n    /**\n     * A flag to enable or disable the rendering of prerendered routes.\n     *\n     * Typically used during development to avoid prerendering all routes ahead of time,\n     * allowing them to be rendered on the fly as requested.\n     *\n     * @private\n     */\n    static ɵallowStaticRouteRender = false;\n    /**\n     * Hooks for extending or modifying the behavior of the server application.\n     * These hooks are used by the Angular CLI when running the development server and\n     * provide extensibility points for the application lifecycle.\n     *\n     * @private\n     */\n    static ɵhooks = /* #__PURE__*/ new Hooks();\n    /**\n     * The manifest for the server application.\n     */\n    manifest = getAngularAppEngineManifest();\n    /**\n     * The number of entry points available in the server application's manifest.\n     */\n    entryPointsCount = Object.keys(this.manifest.entryPoints).length;\n    /**\n     * A cache that holds entry points, keyed by their potential locale string.\n     */\n    entryPointsCache = new Map();\n    /**\n     * Handles an incoming HTTP request by serving prerendered content, performing server-side rendering,\n     * or delivering a static file for client-side rendered routes based on the `RenderMode` setting.\n     *\n     * @param request - The HTTP request to handle.\n     * @param requestContext - Optional context for rendering, such as metadata associated with the request.\n     * @returns A promise that resolves to the resulting HTTP response object, or `null` if no matching Angular route is found.\n     *\n     * @remarks A request to `https://www.example.com/page/index.html` will serve or render the Angular route\n     * corresponding to `https://www.example.com/page`.\n     */\n    async handle(request, requestContext) {\n        const serverApp = await this.getAngularServerAppForRequest(request);\n        return serverApp ? serverApp.handle(request, requestContext) : null;\n    }\n    /**\n     * Retrieves the Angular server application instance for a given request.\n     *\n     * This method checks if the request URL corresponds to an Angular application entry point.\n     * If so, it initializes or retrieves an instance of the Angular server application for that entry point.\n     * Requests that resemble file requests (except for `/index.html`) are skipped.\n     *\n     * @param request - The incoming HTTP request object.\n     * @returns A promise that resolves to an `AngularServerApp` instance if a valid entry point is found,\n     * or `null` if no entry point matches the request URL.\n     */\n    async getAngularServerAppForRequest(request) {\n        // Skip if the request looks like a file but not `/index.html`.\n        const url = new URL(request.url);\n        const entryPoint = await this.getEntryPointExportsForUrl(url);\n        if (!entryPoint) {\n            return null;\n        }\n        // Note: Using `instanceof` is not feasible here because `AngularServerApp` will\n        // be located in separate bundles, making `instanceof` checks unreliable.\n        const ɵgetOrCreateAngularServerApp = entryPoint.ɵgetOrCreateAngularServerApp;\n        const serverApp = ɵgetOrCreateAngularServerApp({\n            allowStaticRouteRender: AngularAppEngine.ɵallowStaticRouteRender,\n            hooks: AngularAppEngine.ɵhooks,\n        });\n        return serverApp;\n    }\n    /**\n     * Retrieves the exports for a specific entry point, caching the result.\n     *\n     * @param potentialLocale - The locale string used to find the corresponding entry point.\n     * @returns A promise that resolves to the entry point exports or `undefined` if not found.\n     */\n    getEntryPointExports(potentialLocale) {\n        const cachedEntryPoint = this.entryPointsCache.get(potentialLocale);\n        if (cachedEntryPoint) {\n            return cachedEntryPoint;\n        }\n        const { entryPoints } = this.manifest;\n        const entryPoint = entryPoints[potentialLocale];\n        if (!entryPoint) {\n            return undefined;\n        }\n        const entryPointExports = entryPoint();\n        this.entryPointsCache.set(potentialLocale, entryPointExports);\n        return entryPointExports;\n    }\n    /**\n     * Retrieves the entry point for a given URL by determining the locale and mapping it to\n     * the appropriate application bundle.\n     *\n     * This method determines the appropriate entry point and locale for rendering the application by examining the URL.\n     * If there is only one entry point available, it is returned regardless of the URL.\n     * Otherwise, the method extracts a potential locale identifier from the URL and looks up the corresponding entry point.\n     *\n     * @param url - The URL of the request.\n     * @returns A promise that resolves to the entry point exports or `undefined` if not found.\n     */\n    getEntryPointExportsForUrl(url) {\n        const { basePath } = this.manifest;\n        if (this.entryPointsCount === 1) {\n            return this.getEntryPointExports('');\n        }\n        const potentialLocale = getPotentialLocaleIdFromUrl(url, basePath);\n        return this.getEntryPointExports(potentialLocale);\n    }\n}\n//# sourceMappingURL=app-engine.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Annotates a request handler function with metadata, marking it as a special\n * handler.\n *\n * @param handler - The request handler function to be annotated.\n * @returns The same handler function passed in, with metadata attached.\n *\n * @example\n * Example usage in a Hono application:\n * ```ts\n * const app = new Hono();\n * export default createRequestHandler(app.fetch);\n * ```\n *\n * @example\n * Example usage in a H3 application:\n * ```ts\n * const app = createApp();\n * const handler = toWebHandler(app);\n * export default createRequestHandler(handler);\n * ```\n * @developerPreview\n */\nexport function createRequestHandler(handler) {\n    handler['__ng_request_handler__'] = true;\n    return handler;\n}\n//# sourceMappingURL=handler.js.map"],"names":["ɵConsole","SERVER_CONTEXT","loadChildrenHelper","ɵresetCompiledComponents"],"mappings":"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"}